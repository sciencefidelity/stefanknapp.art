---
import { urlFor } from "lib/utils"
import { Artwork } from "lib/interfaces"

const { artworks } = Astro.props as { artworks: Artwork[] }
---

<section class="art relative grid">
  <div class="gallery">
    <nav class="buttons absolute">
      <div class="buttons__container flex">
        <button class="btn btn--prev" onclick="prevArtwork()">
          <svg width="100%" height="100%" viewBox="0 0 29 52"><path d="M0.008,25.996l26.004,26.004l2.599,-2.6l-23.405,-23.404l23.405,-23.405l-2.599,-2.599l-26.004,26.004Z"/></svg>
        </button>
        <button class="btn btn--next" onclick="nextArtwork()">
          <svg width="100%" height="100%" viewBox="0 0 29 52"><path d="M28.611,25.996l-26.004,26.004l-2.599,-2.6l23.404,-23.404l-23.404,-23.405l2.599,-2.599l26.004,26.004Z"/></svg>
        </button>
      </div>
    </nav>
    {artworks.map(artwork =>
      <div id="artwork" class="artwork">
        <div class="artwork__container relative grid">
          <img
            alt={`${artwork.title} (${artwork.date})`}
            src={
              urlFor(artwork.image)
                .quality(85)
                .width(1200)
                .url()}
            class="artwork__img"
            decoding="async"
            loading="lazy"
            width={artwork.dimensions.width}
            height={artwork.dimensions.height}
          />
        </div>
        <p class="artwork__caption absolute">
          {artwork.title} {artwork.date}<br />{artwork.medium.toLowerCase()}
        </p>
      </div>
    )}
  </div>
</section>
<script is:inline>
  const artworks = document.getElementsByClassName("artwork")
  const images = document.getElementsByClassName("artwork__img")
  const randomNumber = Math.floor(Math.random() * artworks.length)
  let currentArtwork = randomNumber
  images[currentArtwork].setAttribute("loading", "eager")
  showArtwork(currentArtwork)
  function showArtwork(currentArtwork) {
    for (i = 0; i < artworks.length; i++) {
      artworks[i].style.display = "none"
    }
    artworks[currentArtwork].style.display = "block"
  }
  function prevArtwork() {
    currentArtwork -= 1
    if (currentArtwork < 0) currentArtwork = artworks.length - 1
    showArtwork(currentArtwork)
  }
  function nextArtwork() {
    currentArtwork += 1
    if (currentArtwork >= artworks.length) currentArtwork = 0
    showArtwork(currentArtwork)
  }
  document.onkeydown = e => {
    switch(e.key){
      case 'ArrowLeft': prevArtwork()
      break
      case 'ArrowRight': nextArtwork()
      break
    }
  }
</script>

<style lang="scss" scoped>
  @use '../styles/base/breakpoints' as b;
  @use '../styles/base/colors' as c;

  .art {
    place-content: center;
    height: calc(100vh - 45.2px);
    background: c.$grey-000;
  }

  .gallery {
    font-size: 1rem;
  }

  .buttons {
    inset: 0;
  }

  .buttons__container {
    align-items: center;
    justify-content: space-between;
    width: 85%;
    max-width: 1350px;
    height: 100%;
    margin-inline: auto;
    @include b.mq(sm) {
      width: 95%;
    }
  }

  .btn {
    z-index: 5;
    width: 29px;
    height: 52px;
    cursor: pointer;
    background: transparent;
    opacity: 0.5;
    transition: opacity 0.3s ease;
    @include b.mq(sm) {
      width: 40px;
      height: 40px;
      padding-block: 11px;
      background: rgba(c.$grey-000, 0.9);
      border-radius: 50%;
      opacity: 1;
    }
    svg {
      fill: c.$grey-850;
      @include b.mq(sm) {
        width: 75%;
      }
    }
    &:hover,
    &:focus {
      opacity: 1;
      transition: opacity 0.3s ease;
      @include b.mq(sm) {
        opacity: 1;
      }
    }
  }

  .btn--next {
    right: 0;
    padding-left: 9px;
  }

  .btn--prev {
    left: 0;
    padding-left: 6px;
  }

  .artwork {
    z-index: 7;
    width: 100%;
    height: calc(100vh - 11.9rem);
    margin: auto;
    font-size: 0.8vw;
    background: c.$grey-000;
    object-fit: contain;
    @include b.mq(sm) {
      height: 100%;
    }
  }

  .artwork__container {
    justify-content: center;
    object-fit: contain;
  }

  .artwork__img {
    max-width: 70%;
    height: calc(100vh - 19.9rem);
    margin: auto;
    object-fit: contain;
    @include b.mq(sm) {
      width: 100%;
      max-width: 100%;
    }
  }

  .artwork__caption {
    right: max(calc((100vw - 100rem) / 2), 6%);
    z-index: 7;
    margin: 1rem 0 0;
    font-size: 1.7rem;
    text-align: right;
    @include b.mq(sm) {
      right: 6%;
      bottom: 1rem;
      width: 100%;
      font-size: 1.5rem;
    }
  }
</style>
